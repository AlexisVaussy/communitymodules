Index: MLMatlabScriptWrapper/mlMatlabScriptWrapper.cpp
===================================================================
--- MLMatlabScriptWrapper/mlMatlabScriptWrapper.cpp	(revision 327)
+++ MLMatlabScriptWrapper/mlMatlabScriptWrapper.cpp	(working copy)
@@ -26,9 +26,11 @@
 //! The ML module class MatlabScriptWrapper.
 /*!
 // \file    mlMatlabScriptWrapper.cpp
-// \author  Alexander Gryanik, Markus Harz, Ola Friman, Felix Ritter, Alexander Broersen
+// \author  Alexander Gryanik, Markus Harz, Ola Friman, Felix Ritter, Alexander Broersen, Jens Kaftan
 // \date    2009-02-23
 //
+//  $Id$
+//
 // Module for executing Matlab scripts in MeVisLab.
 */
 //----------------------------------------------------------------------------------
@@ -62,7 +64,7 @@
 //! Constructor
 //----------------------------------------------------------------------------------
 MatlabScriptWrapper::MatlabScriptWrapper (void)
-: BaseOp(3, 3)
+: BaseOp(4, 4)
 {
   ML_TRACE_IN("MatlabScriptWrapper::MatlabScriptWrapper()")
 
@@ -85,6 +87,7 @@
 
   //! Use external Matlab script.
   (_useExternalScriptFld = fields->addBool("useExternalScript"))->setBoolValue(false);
+  (_changePathToScriptLocationFld = fields->addBool("changePathToScriptLocation"))->setBoolValue(false);
 
   //! Where will Matlab script be dumped.
   (_matlabScriptPathFld = fields->addString("matlabScriptPath"))->setStringValue("");
@@ -93,9 +96,16 @@
   (_inDataNameFld[0] = fields->addString("inDataName0"))->setStringValue("Input0");
   (_inDataNameFld[1] = fields->addString("inDataName1"))->setStringValue("Input1");
   (_inDataNameFld[2] = fields->addString("inDataName2"))->setStringValue("Input2");
+  (_inDataNameFld[3] = fields->addString("inDataName3"))->setStringValue("Input3");
   (_outDataNameFld[0] = fields->addString("outDataName0"))->setStringValue("Output0");
   (_outDataNameFld[1] = fields->addString("outDataName1"))->setStringValue("Output1");
   (_outDataNameFld[2] = fields->addString("outDataName2"))->setStringValue("Output2");
+  (_outDataNameFld[3] = fields->addString("outDataName3"))->setStringValue("Output3");
+
+  //! Init output subimg array.
+  for(int i=0; i<4; i++) {
+    _outDataArray[i] = NULL;
+  }
   //! Set input and output XMarker names used in matlab.
   (_inXMarkerNameFld = fields->addString("inXMarkerName"))->setStringValue("inXMarker");
   (_outXMarkerNameFld = fields->addString("outXMarkerName"))->setStringValue("outXMarker");
@@ -110,6 +120,7 @@
   //(_deleteMatlabVarFld = fields->addBool("delMatlabVar"))->setBoolValue(false);
   //! Add update button.
   _calculateFld = fields->addNotify("update");
+  _processingFinishedFld = fields->addNotify("done");
   //! Add restart Matlab button.
   _restartMatlabFld = fields->addNotify("restartMatlab");
   // Error message.
@@ -238,6 +249,14 @@
 {
   ML_TRACE_IN("MatlabScriptWrapper::~MatlabScriptWrapper()");
 
+  for(int i=0; i<4; i++) {
+    if(_outDataArray[i] != NULL)
+    {
+        delete(_outDataArray[i]);
+        _outDataArray[i] = NULL;
+    }
+  }
+
   if (m_pEngine != NULL) {
     engClose(m_pEngine);
   }
@@ -279,7 +298,8 @@
 
   // Update output on an update or if autoapply is enabled.
   if( (field == _calculateFld) ||
-      (_autoCalculationFld->isOn() && ((field == getInField(0))||(field == getInField(1))||(field == getInField(2))||
+      (_autoCalculationFld->isOn() && ((field == getInField(0))||(field == getInField(1))||
+                                       (field == getInField(2))||(field == getInField(3))||
                                        (field == _inputXMarkerListFld)) || (field== _inputWEMFld) ) ||
            (_autoApplyFld->isOn()  && ((field == _scalarFld[0])||(field == _scalarFld[1])||(field == _scalarFld[2])||
                                        (field == _scalarFld[3])||(field == _scalarFld[4])||(field == _scalarFld[5])||
@@ -301,9 +321,12 @@
     bool validScriptString = true;
     if(_useExternalScriptFld->isOn()) { // Get script from .m-file
       validScriptString = _loadMatlabScriptFromFile(evaluateString);
+      std::cout << "MatlabScriptWrapper - " << "perform matlab from script: " << _matlabScriptPathFld->getStringValue() << std::endl;
     } else {
       evaluateString = _matlabScriptFld->getStringValue();
+      std::cout << "MatlabScriptWrapper - " << "perform matlab from text field." << std::endl;
     }
+    clock_t timer_start=clock();
 
     // Execute Matlab script only when the string is valid
     if(validScriptString) {
@@ -335,7 +358,7 @@
 
       // Insert at the end of the script variable to proof execution status
       // and run the script in Matlab
-      evaluateString += "\nmevmatscr=1;";	// Added ';' to prevent unnecessary output
+      evaluateString += "\nmevmatscr=1;";   // Added ';' to prevent unnecessary output
       _statusFld->setStringValue("Matlab script is executing....");
     
       // Buffer to capture Matlab output
@@ -365,6 +388,8 @@
         _clearAllVariables();
       }
       mxDestroyArray(mtmp); mtmp = NULL;
+      clock_t timer_stop=clock();
+      std::cout << "MatlabScriptWrapper - " << "... finished in " << static_cast<double>(timer_stop-timer_start)/CLOCKS_PER_SEC << " seconds." << std::endl; 
     }
     // If the script string was not valid, clear all data so that
     // the user notes this.
@@ -388,7 +413,7 @@
     }
     _getScalarsBackFromMatlab();
     for(int k=0; k<6; ++k) {
-      if(tmpScalars[k] == _scalarFld[k]->getDoubleValue()) {
+      if(tmpScalars[k] != _scalarFld[k]->getDoubleValue()) {
         _scalarFld[k]->notifyAttachments();
       }
     }
@@ -400,7 +425,7 @@
     }
     _getStringsBackFromMatlab();
     for(int k=0; k<6; ++k) {
-      if(tmpstrings[k] == _stringFld[k]->getStringValue()) {
+      if(tmpstrings[k] != _stringFld[k]->getStringValue()) {
         _stringFld[k]->notifyAttachments();
       }
     }
@@ -412,7 +437,7 @@
     }
     _getVectorsBackFromMatlab();
     for(int k=0; k<6; ++k) {
-      if(tmpstrings[k] == _vectorFld[k]->getStringValue()) {
+      if(tmpstrings[k] != _vectorFld[k]->getStringValue()) {
         _vectorFld[k]->notifyAttachments();
       }
     }
@@ -424,16 +449,19 @@
     }
     _getMatricesBackFromMatlab();
     for(int k=0; k<3; ++k) {
-      if(tmpstrings[k] == _matrixFld[k]->getStringValue()) {
+      if(tmpstrings[k] != _matrixFld[k]->getStringValue()) {
         _matrixFld[k]->notifyAttachments();
       }
     }
 
     // Notify image attachments that are new images calculated so that they
     // update themselves and call the calcOutSubImage()
+    _getOutputImageDataBackFromMatlab();
+
     getOutField(0)->notifyAttachments();
     getOutField(1)->notifyAttachments();
     getOutField(2)->notifyAttachments();
+    getOutField(3)->notifyAttachments();
 
     // Notify the XMarkerList output
     _outputXMarkerListFld->notifyAttachments();
@@ -447,7 +475,11 @@
     ecList.push_back(ec);
     
     _outWEM->notifyObservers(ecList);
+
+    _clearAllVariables();
+    _processingFinishedFld->notify();
   }
+  
 }
 
 //----------------------------------------------------------------------------------
@@ -458,7 +490,7 @@
   ML_TRACE_IN("MatlabScriptWrapper::handleInput ()");
 
   // If one of inputs is open we close it artificially by setting the input to a dummy input.
-  if((inIndex == 0)||(inIndex == 1)||(inIndex == 2)) {
+  if((inIndex == 0)||(inIndex == 1)||(inIndex == 2)||(inIndex == 3)) {
     return BaseOp::REDIRECT_TO_DUMMY_OP;
   }
   // If any other input is not present or invalid, we cannot do any processing.
@@ -469,7 +501,7 @@
 
 
 #if ML_MAJOR_VERSION >= 2
-# define __setInSubImageDataType(__t)  for(int __i=0;__i<3;++__i) {getOutImg(outIndex)->setInSubImageDataType(__i,__t);}
+# define __setInSubImageDataType(__t)  for(int __i=0;__i<4;++__i) {getOutImg(outIndex)->setInSubImageDataType(__i,__t);}
 #else
 # define __setInSubImageDataType(__t)
 #endif
@@ -493,65 +525,24 @@
     return;
   }
 
-  // Get variable name in the Matlab workspace of the output image
-  std::string outname = _outDataNameFld[outIndex]->getStringValue();
-  mxArray *m_pImage = engGetVariable(m_pEngine, outname.c_str());
-
   // If we can find the variable and calculate its size, go on.
-  if(m_pImage != NULL)
+  if((_outDataArray[outIndex] != NULL))
   {
-    const mwSize m_numDims = mxGetNumberOfDimensions(m_pImage);
-    if(m_numDims>6) {
-      std::cerr << "calcOutImageProps(): Too many dimensions in Matlab image!" << std::endl << std::flush;
-      return;
-    }
-    Vector outExt = Vector(1,1,1,1,1,1);
-    for (size_t i=0; i<m_numDims; i++)
-    {
-      outExt[i] = static_cast<MLint>(mxGetDimensions(m_pImage)[i]);
-    }
+    Vector outExt = _outDataArray[outIndex]->GetExtend();
 
     // Set page size.
     getOutImg(outIndex)->setPageExt(outExt);
     // Set output image size.
     getOutImg(outIndex)->setImgExt(outExt);
     // Set output image datatype.
-    switch (mxGetClassID(m_pImage)) {
-      case mxDOUBLE_CLASS: getOutImg(outIndex)->setDataType(MLdoubleType); __setInSubImageDataType(MLdoubleType); break;
-      case mxSINGLE_CLASS: getOutImg(outIndex)->setDataType(MLfloatType);  __setInSubImageDataType(MLdoubleType); break;
-      case mxINT8_CLASS:   getOutImg(outIndex)->setDataType(MLint8Type);   __setInSubImageDataType(MLdoubleType); break;
-      case mxUINT8_CLASS:  getOutImg(outIndex)->setDataType(MLuint8Type);  __setInSubImageDataType(MLdoubleType); break;
-      case mxINT16_CLASS:  getOutImg(outIndex)->setDataType(MLint16Type);  __setInSubImageDataType(MLdoubleType); break;
-      case mxUINT16_CLASS: getOutImg(outIndex)->setDataType(MLuint16Type); __setInSubImageDataType(MLdoubleType); break;
-      case mxINT32_CLASS:  getOutImg(outIndex)->setDataType(MLint32Type);  __setInSubImageDataType(MLdoubleType); break;
-      case mxUINT32_CLASS: getOutImg(outIndex)->setDataType(MLuint32Type); __setInSubImageDataType(MLdoubleType); break;
-      case mxINT64_CLASS: // Matlab does not support basic operations on this type
-        //getOutImg(outIndex)->setDataType(MLint64Type);
-        //break;
-      default:
-        getOutImg(outIndex)->setDataType(ML_BAD_DATA_TYPE);
-        std::cerr << "calcOutImageProps(): Output type from Matlab not supported" << std::endl << std::flush;
-    }
-    mxDestroyArray(m_pImage); m_pImage = NULL;
-
-    // Get min and max values in Matlab workspace and set them in MeVisLab
-    std::ostringstream minmaxCommand;
-    minmaxCommand << "mevtmpminval = min(" << outname << "(:));" << "mevtmpmaxval = max(" << outname << "(:));";
-    engEvalString(m_pEngine, minmaxCommand.str().c_str());
-    mxArray *minVal = engGetVariable(m_pEngine, "mevtmpminval");
-    mxArray *maxVal = engGetVariable(m_pEngine, "mevtmpmaxval");
-    // if min and max are not defined, set default values
-    if ((minVal==NULL) || (minVal==NULL)) {
-      getOutImg(outIndex)->setMinVoxelValue(0);
-      getOutImg(outIndex)->setMaxVoxelValue(127);
-    } else {
-      getOutImg(outIndex)->setMinVoxelValue(mxGetScalar(minVal));
-      getOutImg(outIndex)->setMaxVoxelValue(mxGetScalar(maxVal));
-    }
-    mxDestroyArray(minVal); minVal = NULL;
-    mxDestroyArray(maxVal); maxVal = NULL;
-    engEvalString(m_pEngine, "clear mevtmpminval mevtmpmaxval");
-  } else {
+    getOutImg(outIndex)->setDataType( _outDataArray[outIndex]->GetDataType() ); __setInSubImageDataType(MLdoubleType);
+    
+    // Get min and max values and set them in MeVisLab
+    getOutImg(outIndex)->setMinVoxelValue( _outDataArray[outIndex]->GetMinValue() );
+    getOutImg(outIndex)->setMaxVoxelValue( _outDataArray[outIndex]->GetMaxValue() ); 
+  } // if((_outDataArray[outIndex] != NULL))
+  else 
+  {
     getOutImg(outIndex)->setOutOfDate();
     getOutImg(outIndex)->setStateInfo("Cannot set output size, because variable could not be found in Matlab workspace.",ML_BAD_DATA_TYPE);
   }
@@ -580,7 +571,8 @@
 {
   ML_TRACE_IN("MatlabScriptWrapper::calcInSubImageBox ()");
 
-  return outSubImgBox;
+  return SubImgBox(Vector(0), Vector(-1)); 
+  //return outSubImgBox; 
 }
 
 //----------------------------------------------------------------------------------
@@ -597,37 +589,16 @@
     return;
   }
 
-  // Get matlab image data.
-  mxArray *m_pImage = engGetVariable(m_pEngine, (_outDataNameFld[outIndex]->getStringValue()).c_str());
-
-  if ( (m_pImage != NULL) ) {
-    // Copy different types of images from Matlab.
-    MLPhysicalDataType outputClass;
-    switch (mxGetClassID(m_pImage)) {
-      case mxDOUBLE_CLASS: outputClass = MLdoubleType; break;
-      case mxSINGLE_CLASS: outputClass = MLfloatType;  break;
-      case mxINT8_CLASS:   outputClass = MLint8Type;   break;
-      case mxUINT8_CLASS:  outputClass = MLuint8Type;  break;
-      case mxINT16_CLASS:  outputClass = MLint16Type;  break;
-      case mxUINT16_CLASS: outputClass = MLuint16Type; break;
-      case mxINT32_CLASS:  outputClass = MLint32Type;  break;
-      case mxUINT32_CLASS: outputClass = MLuint32Type; break;
-      case mxINT64_CLASS: // Matlab does not support basic operations on this type
-        //outputClass = MLint64Type;
-        //break;
-      default:
-        outputClass = ML_BAD_DATA_TYPE;
-        std::cerr << "calcOutSubImage(): Output type from Matlab not supported" << std::endl << std::flush;
-    }
-    SubImg subImgBuf(outSubImg->getBox(), outputClass, mxGetPr(m_pImage));
+  if ( (_outDataArray[outIndex] != NULL) ) 
+  {
+    SubImg subImgBuf(SubImageBox(_outDataArray[outIndex]->GetExtend()), _outDataArray[outIndex]->GetDataType(), _outDataArray[outIndex]->GetData());
     outSubImg->copySubImage(subImgBuf);
-
-    mxDestroyArray(m_pImage); m_pImage = NULL;
   }
   else
   {
     // Throw error, if no data available.
-    ML_PRINT_ERROR("MatlabScriptWrapper::calcOutSubImage()", ML_BAD_INPUT_IMAGE_POINTER, "Cannot copy from Matlab data.");
+    outSubImg->fillSubImg(0.0);
+    //ML_PRINT_ERROR("MatlabScriptWrapper::calcOutSubImage()", ML_BAD_INPUT_IMAGE_POINTER, "Cannot copy from Matlab data.");
   }
 }
 
@@ -655,6 +626,15 @@
     }
     else
     {
+      // Find %name% in string if existent
+        size_t firstLoc = pathString.find("%");
+        size_t lastLoc = pathString.rfind("%");
+        if(firstLoc != lastLoc)
+        {
+            std::string variableName = pathString.substr(firstLoc+1, lastLoc-firstLoc-1);
+            char* systemVariable = getenv( variableName.c_str() );
+            pathString = pathString.replace(firstLoc, lastLoc-firstLoc+1, systemVariable);
+        }
       // File to open.
       std::ifstream dat;
       dat.open(pathString.c_str());
@@ -664,6 +644,18 @@
         return false;
       }
 
+      // Add matlab command to change path if specified
+      if(_changePathToScriptLocationFld->isOn())
+      {
+          // Extract path of .m file
+          size_t endPos=pathString.rfind("/");
+          if(endPos != std::string::npos)
+          {
+              std::string changeFolderCommand = "cd " + pathString.substr(0, endPos) + ";";
+              tmpString << changeFolderCommand << "\n";
+          }
+      }
+
       // Read script line by line from file.
       std::string line;
       while(!dat.eof())
@@ -677,6 +669,7 @@
 
       // Get string
       evaluateString = tmpString.str();
+      _matlabScriptFld->setStringValue( evaluateString );
     }
   }
   ML_CATCH_RETHROW;
@@ -730,12 +723,12 @@
   }
 
   // Clear input images
-  for(int i=0; i<3; i++) {
+  for(int i=0; i<4; i++) {
     clearString << _inDataNameFld[i]->getStringValue() << " ";
   }
 
   // Clear output images
-  for(int i=0; i<3; i++) {
+  for(int i=0; i<4; i++) {
     clearString << _outDataNameFld[i]->getStringValue() << " ";
   }
 
@@ -764,7 +757,7 @@
     return;
   }
 
-  for(int i=0; i<3; i++)
+  for(int i=0; i<4; i++)
   {
     // Get a valid input if possible. Dummy input is considered invalid.
     PagedImg *inImg = getUpdatedInImg(i);
@@ -845,6 +838,91 @@
   }
 }
 
+void MatlabScriptWrapper::_getOutputImageDataBackFromMatlab()
+{
+    for(int i=0; i<4; i++) 
+    {
+        if(_outDataArray[i] != NULL)
+        {
+            delete(_outDataArray[i]);
+            _outDataArray[i] = NULL;
+        }
+    }
+
+    // Check if Matlab is started.
+    if (!_checkMatlabIsStarted())
+    {
+        std::cerr << "_getOutputImageDataBackFromMatlab(): Cannot find Matlab engine!" << std::endl << std::flush;
+        return;
+    }
+
+    for(int outIndex=0; outIndex<4; outIndex++) 
+    {
+        // Get matlab image data.
+        std::string outname = _outDataNameFld[outIndex]->getStringValue();
+        mxArray *m_pImage = engGetVariable(m_pEngine, outname.c_str());
+
+        if ( (m_pImage != NULL) ) 
+        {
+            const mwSize m_numDims = mxGetNumberOfDimensions(m_pImage);
+            if(m_numDims>6) {
+              std::cerr << "_getOutputImageDataBackFromMatlab(): Too many dimensions in Matlab image!" << std::endl << std::flush;
+              return;
+            }
+            Vector outExt = Vector(1,1,1,1,1,1);
+            for (size_t i=0; i<m_numDims; i++)
+            {
+              outExt[i] = static_cast<MLint>(mxGetDimensions(m_pImage)[i]);
+            }
+            
+            // Copy different types of images from Matlab.
+            MLPhysicalDataType outputClass;
+            switch (mxGetClassID(m_pImage)) {
+              case mxDOUBLE_CLASS: outputClass = MLdoubleType; break;
+              case mxSINGLE_CLASS: outputClass = MLfloatType;  break;
+              case mxINT8_CLASS:   outputClass = MLint8Type;   break;
+              case mxUINT8_CLASS:  outputClass = MLuint8Type;  break;
+              case mxINT16_CLASS:  outputClass = MLint16Type;  break;
+              case mxUINT16_CLASS: outputClass = MLuint16Type; break;
+              case mxINT32_CLASS:  outputClass = MLint32Type;  break;
+              case mxUINT32_CLASS: outputClass = MLuint32Type; break;
+              default:
+                outputClass = ML_BAD_DATA_TYPE;
+                std::cerr << "_getOutputImageDataBackFromMatlab(): Output type from Matlab not supported" << std::endl << std::flush;
+            }
+
+            _outDataArray[outIndex] = new MatlabScriptWrapperOutputData();
+            _outDataArray[outIndex]->SetData( outExt, outputClass, mxGetPr(m_pImage) );
+
+            mxDestroyArray(m_pImage); 
+            m_pImage = NULL;
+
+            // Get min and max values in Matlab workspace and set them in MeVisLab
+            std::ostringstream minmaxCommand;
+            minmaxCommand << "mevtmpminval = min(" << outname << "(:));" << "mevtmpmaxval = max(" << outname << "(:));";
+            engEvalString(m_pEngine, minmaxCommand.str().c_str());
+            mxArray *minVal = engGetVariable(m_pEngine, "mevtmpminval");
+            mxArray *maxVal = engGetVariable(m_pEngine, "mevtmpmaxval");
+            // if min and max are not defined, set default values
+            if ((minVal==NULL) || (minVal==NULL)) 
+            {
+                _outDataArray[outIndex]->SetMinMaxValue(0,127);
+            } else 
+            {
+                _outDataArray[outIndex]->SetMinMaxValue(mxGetScalar(minVal), mxGetScalar(maxVal));
+            }
+            mxDestroyArray(minVal); minVal = NULL;
+            mxDestroyArray(maxVal); maxVal = NULL;
+            engEvalString(m_pEngine, "clear mevtmpminval mevtmpmaxval");
+        } // if ( (m_pImage != NULL) )
+        else
+        {
+            // Throw error, if no data available.
+            // ML_PRINT_ERROR("MatlabScriptWrapper::calcOutSubImage()", ML_BAD_INPUT_IMAGE_POINTER, "Cannot copy from Matlab data.");
+        }
+    } // for outindex
+}
+
 //! Copy input XMarkerList to Matlab.
 void MatlabScriptWrapper::_copyInputXMarkerToMatlab()
 {
@@ -1237,9 +1315,11 @@
     if(temp!=NULL) {
       if(mxGetClassID(temp)==mxDOUBLE_CLASS) {
         double *fieldVal = static_cast<double*>(mxGetPr(temp));
+        _scalarFld[i]->enableNotificationsGlobally(false);
         _scalarFld[i]->setDoubleValue(fieldVal[0]);
+        _scalarFld[i]->enableNotificationsGlobally(true);
       } else {
-        std::cerr << "_getVectorsBackFromMatlab(): Output type from Matlab not supported" << std::endl << std::flush;
+        std::cerr << "_getScalarsBackFromMatlab(): Output type from Matlab not supported" << std::endl << std::flush;
       }
     }
   }
@@ -1288,10 +1368,12 @@
     temp = engGetVariable(m_pEngine, (_stringNameFld[i]->getStringValue()).c_str());
     if(temp!=NULL)
     {
-      tempsize = mxGetN(temp)+1;
+      tempsize = (int)mxGetN(temp)+1;
       ML_CHECK_NEW(fieldVal,char[tempsize]);
       mxGetString(temp,fieldVal,tempsize);
+      _stringFld[i]->enableNotificationsGlobally(false);
       _stringFld[i]->setStringValue(fieldVal);
+      _stringFld[i]->enableNotificationsGlobally(true);
       ML_DELETE(fieldVal);
     }
   }
@@ -1344,7 +1426,9 @@
       if(mxGetClassID(temp)==mxDOUBLE_CLASS) {
         double *fieldVal = static_cast<double*>(mxGetPr(temp));
         if(mxGetM(temp)==1 && mxGetN(temp)==4) {
+          _vectorFld[i]->enableNotificationsGlobally(false);
           _vectorFld[i]->setVec4fValue(vec4(fieldVal[0],fieldVal[1],fieldVal[2],fieldVal[3]));
+          _vectorFld[i]->enableNotificationsGlobally(true);
         } else {
           std::cerr << "_getVectorsBackFromMatlab(): Incorrect vector size" << std::endl << std::flush;
         }
@@ -1405,10 +1489,12 @@
       if(mxGetClassID(temp)==mxDOUBLE_CLASS) {
         double *fieldVal = static_cast<double*>(mxGetPr(temp));
         if(mxGetM(temp)==4 && mxGetN(temp)==4) {
+          _matrixFld[i]->enableNotificationsGlobally(false);
           _matrixFld[i]->setMatrixValue(mat4(fieldVal[0],fieldVal[4], fieldVal[8],fieldVal[12],
                                              fieldVal[1],fieldVal[5], fieldVal[9],fieldVal[13],
                                              fieldVal[2],fieldVal[6],fieldVal[10],fieldVal[14],
                                              fieldVal[3],fieldVal[7],fieldVal[11],fieldVal[15]));
+          _matrixFld[i]->enableNotificationsGlobally(true);
         } else {
           std::cerr << "_getMatricesBackFromMatlab(): Incorrect matrix size" << std::endl << std::flush;
         }

Property changes on: MLMatlabScriptWrapper/mlMatlabScriptWrapper.cpp
___________________________________________________________________
Added: svn:keywords
   + Revision Author Date Id

Index: MLMatlabScriptWrapper/mlMatlabScriptWrapperOutputData.h
===================================================================
--- MLMatlabScriptWrapper/mlMatlabScriptWrapperOutputData.h	(revision 0)
+++ MLMatlabScriptWrapper/mlMatlabScriptWrapperOutputData.h	(revision 0)
@@ -0,0 +1,89 @@
+//----------------------------------------------------------------------------------
+//! The ML module class MatlabScriptWrapper.
+/*!
+// \file    mlMatlabScriptWrapperOutputData.h
+// \author  Jens Kaftan
+// \date    2010-09-15
+//
+// Class for storing output data created in Matlab
+*/
+//----------------------------------------------------------------------------------
+
+
+#ifndef __mlMatlabScriptWrapperOutputData_H
+#define __mlMatlabScriptWrapperOutputData_H
+
+// SDK includes
+#include <mlBasics.h>
+
+ML_START_NAMESPACE
+
+//! The output memory management class used in MatlabScriptWrapper
+class MatlabScriptWrapperOutputData
+{
+public:
+	//! Constructor.
+	MatlabScriptWrapperOutputData (void)
+	{
+		_data = NULL;
+		_dataClass = ML_BAD_DATA_TYPE;
+		_ext = ImageVector();
+		_minval = 0;
+		_maxval = 0;
+	};
+	//! Destructor.
+	~MatlabScriptWrapperOutputData ()
+	{
+		if(_data)
+		{
+			delete []_data;
+			_data = NULL;
+		}
+	};
+
+	//! Copy new data to class (and deallocate old data if existent)
+	void SetData(const ImageVector& extend, const MLPhysicalDataType datatype, const double* data)
+	{
+		if(_data != NULL)
+		{
+			delete []_data;
+			_data = NULL;
+		}
+		_ext = extend;
+		_dataClass = datatype;
+
+		SubImageBox temp = SubImageBox(extend);
+		try{
+			_data = new double[temp.getNumVoxels()];
+			memcpy(_data, data, sizeof(double)*temp.getNumVoxels() );
+		}
+		catch(std::bad_alloc) 
+		{
+			std::cerr << "MatlabScriptWrapperOutputData::SetData - " << "error during memory allocation" << std::endl;
+		}
+	};
+
+	void SetMinMaxValue(const MLldouble min, const MLldouble max)
+	{
+		_minval = min;
+		_maxval = max;
+	};
+
+	inline double* GetData() { return(_data); };
+	inline MLPhysicalDataType GetDataType() { return(_dataClass); };
+	inline ImageVector GetExtend() { return(_ext); };
+	inline MLldouble GetMinValue() { return(_minval); };
+	inline MLldouble GetMaxValue() { return(_maxval); };
+
+private:
+	double* _data;
+	MLPhysicalDataType _dataClass;
+	ImageVector _ext;
+	MLldouble _minval;
+	MLldouble _maxval;
+};
+
+ML_END_NAMESPACE
+
+
+#endif // __mlMatlabScriptWrapperOutputData_H
\ No newline at end of file

Property changes on: MLMatlabScriptWrapper/mlMatlabScriptWrapperOutputData.h
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:eol-style
   + native

Index: MLMatlabScriptWrapper/mlMatlabScriptWrapper.h
===================================================================
--- MLMatlabScriptWrapper/mlMatlabScriptWrapper.h	(revision 327)
+++ MLMatlabScriptWrapper/mlMatlabScriptWrapper.h	(working copy)
@@ -26,9 +26,11 @@
 //! The ML module class MatlabScriptWrapper.
 /*!
 // \file    mlMatlabScriptWrapper.h
-// \author  Alexander Gryanik, Markus Harz, Ola Friman, Felix Ritter
+// \author  Alexander Gryanik, Markus Harz, Ola Friman, Felix Ritter, Jens Kaftan
 // \date    2009-02-23
 //
+//  $Id$
+//
 // Module for executing Matlab scripts in MeVisLab.
 */
 //----------------------------------------------------------------------------------
@@ -40,6 +42,7 @@
 
 // Local includes
 #include "MLMatlabScriptWrapperSystem.h"
+#include "mlMatlabScriptWrapperOutputData.h"
 
 // SDK includes
 #include <mlXMarkerList.h>
@@ -125,6 +128,8 @@
 
   //! Copies input image data into Matlab.
   void _copyInputImageDataToMatlab();
+  //! Copies output image from Matlab.
+  void _getOutputImageDataBackFromMatlab();
   //! Copies input XMarkerList into Matlab.
   void _copyInputXMarkerToMatlab();
   //! Copies XMarkerList from Matlab and copies results into output XMarkerList.
@@ -172,6 +177,8 @@
   StringField* _matlabScriptFld;
   //! Use external script.
   BoolField* _useExternalScriptFld;
+  //! Change matlab path to script path
+  BoolField* _changePathToScriptLocationFld;
 
   //! Name of file where matlab script will be dumped.
   StringField *_matlabScriptPathFld;
@@ -180,9 +187,11 @@
   BoolField* _showSessionWindowFld;
 
   //{@ Set matlab names for input and output images.
-  StringField *_inDataNameFld[3];
-  StringField *_outDataNameFld[3];
+  StringField *_inDataNameFld[4];
+  StringField *_outDataNameFld[4];
   //@}
+  MatlabScriptWrapperOutputData *_outDataArray[4];
+
   //{@ Set matlab names for input and output XMarkerList.
   StringField *_inXMarkerNameFld;
   StringField *_outXMarkerNameFld;
@@ -194,6 +203,8 @@
 
   //! If pressed, the module updates.
   NotifyField* _calculateFld;
+  //! Pressed if update has been performed. (Read-only)
+  NotifyField* _processingFinishedFld;
   //! If true, the module updates on input changes.
   BoolField* _autoCalculationFld;
   //! If true, the module updates on parameter/field changes.

Property changes on: MLMatlabScriptWrapper/mlMatlabScriptWrapper.h
___________________________________________________________________
Added: svn:keywords
   + Revision Author Date Id

Index: MLMatlabScriptWrapper/MLMatlabScriptWrapper.pro
===================================================================
--- MLMatlabScriptWrapper/MLMatlabScriptWrapper.pro	(revision 327)
+++ MLMatlabScriptWrapper/MLMatlabScriptWrapper.pro	(working copy)
@@ -122,7 +122,8 @@
 HEADERS += \
     MLMatlabScriptWrapperInit.h \
     MLMatlabScriptWrapperSystem.h \
-    mlMatlabScriptWrapper.h
+    mlMatlabScriptWrapper.h \
+    mlMatlabScriptWrapperOutputData.h
 
 SOURCES += \
     MLMatlabScriptWrapperInit.cpp \
