// Example parameter file for rigid registration
// C-style comments: //

// The internal pixel type, used for computations
// Leave to float in general
(FixedInternalImagePixelType "P_FixedInternalImagePixelType")
(MovingInternalImagePixelType "P_MovingInternalImagePixelType")

// The dimensions of the fixed and moving image
(FixedImageDimension P_FixedImageDimension)
(MovingImageDimension P_MovingImageDimension)

//Components

// The following components should be left as they are:
(Registration "P_Registration")
(FixedImagePyramid "P_FixedImagePyramid")
(MovingImagePyramid "P_MovingImagePyramid")
(Interpolator "P_Interpolator")
(ResampleInterpolator "P_ResampleInterpolator")
(Resampler "P_Resampler")

// You may change these:
// The optimizer StandardGradientDescent works quite ok 
// in general. The Transform and Metric are important and
// need to be chosen careful for each application.
(Optimizer "P_Optimizer")
(Transform "P_Transform")
(Metric "P_Metric")

// Scales the rotations compared to the translations, to make
// sure they are in the same range. The higher this parameter,
// the smaller the changes in rotation angle in each iteration.
// If you have the feeling that rotations are not found by elastix,
// decrease it; if elastix crashes after a few iterations, with
// the message that all samples map outside the moving image 
// buffer, you may have to increase this parameter.
//(Scales 50000.0)
// Better use automatic scales estimation!:
(AutomaticScalesEstimation P_AutomaticScalesEstimation)

// Automatically guess an initial translation
// We already did a translation optimization in this example,
// so this is not needed/recommended here.
(AutomaticTransformInitialization P_AutomaticTransformInitialization)

// Choose another center of rotation for the EulerTransform, if you like
// Uncomment if you want that. Otherwise the center of the image is used.
//(CenterOfRotation P_CenterOfRotation)

// The number of resolutions. 1 Is only enough if the expected
// deformations are small. 3 or 4 mostly works fine.
(NumberOfResolutions P_NumberOfResolutions)

// The pixel type of the resulting image
(ResultImagePixelType "P_ResultImagePixelType")

// If you use a mask, this option is important. You can 
// set it for each resolution differently.
// If the mask serves as region of interest, set it to false.
// If the mask indicates which pixels are valid, then set it to true.
// If you do not use a mask, the option doesn't matter.
(ErodeMask P_ErodeMask)

// Whether transforms are combined by composition or by addition.
// In generally, Compose is the best option in most cases.
// It does not influence the results very much.
(HowToCombineTransforms "P_HowToCombineTransforms")

// This is an important option. It defines the complexity of
// the deformation field.
// Final spacing of B-Spline grid (unit = size of 1 voxel)
// You can give it for each dimension differently, or for 
// all dimensions the same.
(FinalGridSpacingInVoxels P_FinalGridSpacingInVoxels )

// You may also give the B-spline grid spacing in mm, like this:
//(FinalGridSpacingInPhysicalUnits P_FinalGridSpacingInPhysicalUnits )

// Number of spatial samples used to compute the mutual
// information in each resolution level.
// With a StandardGradientDescent optimizer, in combination with
// the two options below, around 2000 samples may already suffice.
(NumberOfSpatialSamples P_NumberOfSpatialSamples)

// Refresh these spatial samples in every iteration, and select
// them randomly.
(NewSamplesEveryIteration P_NewSamplesEveryIteration)
(ImageSampler "P_ImageSampler")

//Number of grey level bins in each resolution level,
// for the mutual information. 16 or 32 usually works fine.
(NumberOfHistogramBins P_NumberOfHistogramBins)

//Order of B-Spline interpolation used in each resolution level:
// It may improve accuracy if you set this to 3. Never use 0.
(BSplineInterpolationOrder P_BSplineInterpolationOrder)

//Order of B-Spline interpolation used for applying the final
// deformation.
// 3 gives good accuracy.
// 1 gives worse accuracy (linear interpolation)
// 0 gives worst accuracy, but may be appropriate for 
// binary images; this would be equivalent to nearest neighbor
// interpolation.
(FinalBSplineInterpolationOrder P_FinalBSplineInterpolationOrder)

//Default pixel value for pixels that come from outside the picture:
(DefaultPixelValue P_DefaultPixelValue)

// The following parameters are for the StandardGradientDescent
// optimizer. They determine the step size.
// Especially SP_a needs to be tuned for each specific application.
// The number of iterations is also important.

//Maximum number of iterations in each resolution level:
// 100-500 works usually fine.
(MaximumNumberOfIterations P_MaximumNumberOfIterations)

// AutomaticParameterEstimation: When this parameter is set to "true",
// many other parameters are calculated automatically: SP_a, SP_alpha,
// SigmoidMax, SigmoidMin, and SigmoidScale. In the elastix.log file 
// the actually chosen values for these parameters can be found. 
// example: (AutomaticParameterEstimation "true")
// Default/recommended value: "true". The parameter can be specified or 
// each resolution, or for all resolutions at once.
(AutomaticParameterEstimation P_AutomaticParameterEstimation)

//SP: Param_a in each resolution level. a_k = a/(A+k+1)^alpha
// If you have the feeling that the registration is 'too careful'
// and progress towards the solution is made very slowly, you may
// have to increase this parameters. If elastix crashes after a
// few iterations, with the message that all samples map outside
// the moving image buffer, you may have to decrease this parameter.
// It means that the optimisation was performed too 'agressive'.
// Think in orders of magnitude. 3200.0 or 3210.0 will not matter.
// 3200.0 vs 6400.0 starts to be interesting.
(SP_a P_SP_a_)

//SP: Param_A in each resolution level. a_k = a/(A+k+1)^alpha
// Usually 50.0 or 100.0 works fine.
(SP_A P_SP_A)

//SP: Param_alpha in each resolution level. a_k = a/(A+k+1)^alpha
// usually 0.602 works fine.
(SP_alpha P_SP_alpha)



