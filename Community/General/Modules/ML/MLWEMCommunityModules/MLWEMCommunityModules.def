
//----------------------------------------------------------------------------------
// MLModule WEMPlane
//----------------------------------------------------------------------------------
MLModule WEMPlane {
  DLL = "MLWEMCommunityModules"
  author = "Bart De Dobbelaer"
  status = "work-in-progress"
  genre    = WEMProcessing
  comment  = "Draw WEM plane intersected by WEM bounding box"
  keywords = "WEM plane"

  seeAlso = "WEMClip"

  exampleNetwork = "$(LOCAL)/WEMPlane/WEMPlaneExample.mlab"
  documentation  = "$(LOCAL)/WEMPlane/WEMPlane.html"

  Interface {
    Parameters {
      Field selectedTab       { type = int  value = 0    }
      Field outputTabSelected { type = bool value = true }
    }
  }

  Description {
//  Field faceAlphaValue     { min = 0 max = 1 }
//  Field faceShininessValue { min = 0 max = 1 }
//  Field lineWidth          { min = 1         }
//  Field pointSize          { min = 1         }
    Field progress           { persistent = NO }
//  Field useInputWEMToCreateOutputWEM { persistent = NO }
  }

  Commands {
    source = $(LOCAL)/includes/MLWEMModules.py
    FieldListener isProcessing {
      command = setMouseCursor
    }
    source = $(LOCAL)/includes/updateTabs.py

    // put more commands in here if required
  
  }

  Window {
    Category {
      Horizontal {
        alignX = Left
        expandX = YES
        expandY = NO
        
        ButtonBar selectedTab {
          show = toolbuttons
          items {
            item 0 {
              title = "Output"
            }
            item 1 {
              title = "Visuals"
            }
            item 2 {
              title = "Advanced"
            }
          }
        }
        FieldListener selectedTab { command = updateTabs }
      }

      Box "" {
        TabView {
          mode = Invisible
          name = "parametersTab"

          TabViewItem "Output" {
            Field = plane
            Separator { direction = Horizontal }
            Checkbox = generateEdges

            Separator { direction = Horizontal }
            Field = label
            Field = description
          }

          TabViewItem "Visuals" {
            Field colorMode { title = "Color Mode:" }

            Separator { direction = horizontal }

            Horizontal {
              CheckBox drawFaces       { title = "Draw Faces" }
              Field faceDiffuseColor   { title = "Diffuse Color:" }
            }
            Horizontal {
              CheckBox useFaceAmbientColor { title = "Use "  }
              Field faceAmbientColor       { title = "Ambient Color:" }
            }
            Horizontal {
              CheckBox useFaceSpecularColor { title = "Use" }
              Field faceSpecularColor       { title = "Specular Color:" }
            }

            Separator { direction = horizontal }

            Horizontal {
              CheckBox drawEdges { title = "Draw edges" }
              Field    edgeColor { title = "Edge Color:" }
            }
            Horizontal {
              CheckBox drawNodes { title = "Draw nodes" }
              Field    nodeColor { title = "Node Color:" }
            }

            Separator { direction = horizontal }

            Horizontal {
              CheckBox drawBoundingBoxes { title = "Draw bounding boxes" }
              Field boundingBoxColor     { title = " Color:" }
            }

            Separator { direction = horizontal }

            Horizontal {
              CheckBox drawFaceNormals { title = "Draw face normals" }
              Field faceNormalsColor   { title = "Color:" }
            }
          
            Horizontal {
              CheckBox drawNodeNormals { title = "Draw node normals" }
              Field nodeNormalsColor   { title = "Color:" }
            }
          }

          TabViewItem "More ..." {
            Field faceNormalsScale { title = "Face Normal Scale:" step = 0.1 }
            Field nodeNormalsScale { title = "Node Normal Scale:" step = 0.1 }

            Separator { direction = horizontal }

            Field faceAlphaValue     { title = "Face Alpha: "    step = 0.1 }
            Field faceShininessValue { title = "Face Shininess:" step = 0.1 }
          
            Separator { direction = horizontal }

            Field lineWidth { title = "Line Width: " step = 1 }
            Field pointSize { title = "Point Size: " step = 1 }

            Separator { direction = horizontal }

            CheckBox useEdgeColoringMode { title = "Use coloring mode for edges" }

            Separator { direction = horizontal }

            Field nodeRenderingMode { title = "Node Rendering Mode:" }
            Field boundingBoxMode   { title = "Bounding Box Mode:"   }
          }
        }
      }
       Horizontal {
         alignX   = Right
         CheckBox = autoUpdate
         CheckBox = autoApply
         Button   = apply
      }
    }
    Execute = updateTabs
  }
} // MLModule WEMPlane

//----------------------------------------------------------------------------------
// MLModule WEMVolume
//----------------------------------------------------------------------------------
MLModule WEMVolume {
  DLL            = "MLWEMCommunityModules"

  genre          = "WEM"
  group          = "BIGR"
  author         = "Coert Metz"
  status         = "work-in-progress"
  comment        = "Computes the volumes of the WEM patches"
  keywords       = "WEM,volume"
  documentation = "$(LOCAL)/WEMVolume/WEMVolume.html"
  seeAlso        = ""
  exampleNetwork = "$(LOCAL)/WEMVolume/WEMVolumeExample.mlab"

  Commands {
    source = $(LOCAL)/includes/MLWEMModules.py
    FieldListener isProcessing {
      command = setMouseCursor
    }
    // put more commands in here if required
  
  }

  Description {
  
    // put the fields' description in here if required
  
  }

  Window {
    minimumWidth = 250

    Category "Main" {

      Field minVolume {
        expandX = True
        edit = False
      }
      Field minVolumePatchIndex {
        expandX = True
        edit = False
      }
      Field maxVolume {
        expandX = True
        edit = False
      }
      Field maxVolumePatchIndex {
        expandX = True
        edit = False
      }
      
      //Separator { direction = horizontal }

      //Horizontal {
      //CheckBox autoApply { title = "Auto Apply" }
      //Field apply        { title = "Apply"      }
      //}
    }
  }
} // MLModule WEMVolume

//----------------------------------------------------------------------------------
// MLModule WEMCenterOfMass
//----------------------------------------------------------------------------------
MLModule WEMCenterOfMass {
  DLL            = "MLWEMCommunityModules"

  genre          = "WEM"
  group          = "BIGR"
  author         = "Coert Metz"
  status         = "stable"
  comment        = "Computes the center of mass of the nodes of WEM object"
  keywords       = "WEM,Center of Mass,Centroid"
  seeAlso        = ""
  documentation  = "$(LOCAL)/WEMCenterOfMass/WEMCenterOfMass.html"
  exampleNetwork = "$(LOCAL)/WEMCenterOfMass/WEMCenterOfMassExample.mlab" 

  Commands {
    source = $(LOCAL)/includes/MLWEMModules.py
    FieldListener isProcessing {
      command = setMouseCursor
    }
    // put more commands in here if required
  
  }

  Description {
  
    // put the fields' description in here if required
  
  }

  Window {
    Category "Main" {

      Field centerOfMass {
        expandX = True
      }
      Field inverseCenterOfMass {
        expandX = True
      }
      Field useSurface {
        tooltip = 
"If checked the centroid is calculated through a 
weighted average of the centroids of all faces. Otherwise 
the centroid is the average of the node positions"
      }
      
      //Separator { direction = horizontal }

      //Horizontal {
        //CheckBox autoApply { title = "Auto Apply" }
        //Field apply        { title = "Apply"      }
      //}
    }
  }
} // MLModule WEMCenterOfMass

//----------------------------------------------------------------------------------
// MLModule WEMCMSelectPatches
//----------------------------------------------------------------------------------
MLModule WEMCMSelectPatches {
  DLL            = "MLWEMCommunityModules"

  genre          = "WEM"
  group          = "BIGR"
  author         = "Coert Metz"
  status         = "stable"
  comment        = "Computes the center of mass of a WEM object"
  keywords       = "WEM,Center of Mass,Centroid"
  seeAlso        = ""
  documentation  = "$(LOCAL)/WEMCMSelectPatches/WEMCMSelectPatches.html"
  exampleNetwork = "$(LOCAL)/WEMCMSelectPatches/WEMCMSelectPatchesExample.mlab"
  deprecatedName = "WEMSelectPatch"

  Commands {
    source = $(LOCAL)/includes/MLWEMModules.py
    FieldListener isProcessing {
      command = setMouseCursor
    }
    // put more commands in here if required
  
  }

  Description {
  
    // put the fields' description in here if required
  
  }

  Window {

    Category "Main" {
      Field patchStartIndex {}
      Field patchEndIndex {}
      CheckBox onePatch {}
    }    
  }
} // MLModule WEMCMSelectPatches

//----------------------------------------------------------------------------------
// MLModule WEMNodesToFile
//----------------------------------------------------------------------------------
MLModule WEMNodesToFile {
  documentation = "$(LOCAL)/WEMNodesToFile/WEMNodesToFile.html"
  DLL            = "MLWEMCommunityModules"

  genre          = "WEM"
  group          = "BIGR"
  author         = "Coert Metz"
  status         = "stable"
  comment        = "Output WEM node coordinates to a text filed"
  keywords       = "WEM,nodes,output,save,file"
  seeAlso        = ""

  Commands {
    source = $(LOCAL)/includes/MLWEMModules.py
    FieldListener isProcessing {
      command = setMouseCursor
    }
    // put more commands in here if required
  
  }

  Description {
  
    // put the fields' description in here if required
  
  }

  Window {
    minimumWidth = 400

    Vertical {
      margin = 3
      Field filename {
        expandX = True
        browseButton = True
        browseMode = save
      }
      Field transformixCompatible {}
      Separator {}
      Button save {}
    }
  }
} // MLModule WEMCenterOfMass

